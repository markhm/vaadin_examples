<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>dk.mhm</groupId>
    <artifactId>vaadin-examples-ui</artifactId>
    <name>vaadin-examples-ui</name>
    <version>0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
	<description>Vaadin examples, among other for integrating D3</description>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <failOnMissingWebXml>false</failOnMissingWebXml>

        <drivers.dir>${project.basedir}/drivers</drivers.dir>
        <drivers.downloader.phase>pre-integration-test</drivers.downloader.phase>

        <!-- Component versions -->
        <!-- <vaadin.version>13.0.10</vaadin.version> -->
        <vaadin.version>14.0.0</vaadin.version>
        <spring-version>5.1.9.RELEASE</spring-version>
        <jetty.plugin.version>9.3.9.v20160517</jetty.plugin.version>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.7.RELEASE</version>
    </parent>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-bom</artifactId>
                <version>${vaadin.version}</version>
                <type>pom</type>
                <scope>import</scope>
                <exclusions>
                    <exclusion>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-log4j12</artifactId>
                    </exclusion>
                    <exclusion>
                        <groupId>log4j</groupId>
                        <artifactId>log4j</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-spring-boot-starter</artifactId>
        </dependency>
<!--
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>flow-server-compatibility-mode</artifactId>
        </dependency>
-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-testbench</artifactId>
            <scope>test</scope>
        </dependency>
<!--
        <dependency>
            <groupId>org.webjars.bowergithub.polymerelements</groupId>
            <artifactId>paper-toggle-button</artifactId>
            <version>3.0.1</version>
        </dependency>
-->
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-core -->

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring-version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>28.0-jre</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.google.guava/guava - ->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>28.0-jre</version>
        </dependency> -->
    </dependencies>

    <!-- https://www.mkyong.com/maven/maven-profiles-example/ -->
    <!-- Spring Boot special way of handling filters:
    https://www.logicbig.com/tutorials/spring-framework/spring-boot/maven-resource-filtering.html -->

    <profiles>
        <profile>
            <id>dev</id>
            <activation>                 <!-- activate if -Pdev -->
                <!-- this profile is active by default -->
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <vaadin.productionMode>false</vaadin.productionMode>
                <env>dev</env>
            </properties>
            <build>

            </build>
        </profile>

        <profile>
            <id>prod</id> <!-- activate if system properties 'env=prod' or with -Pprod -->
            <activation>
            </activation>
            <properties>
                <vaadin.productionMode>true</vaadin.productionMode>
                <env>prod</env>
            </properties>

            <dependencies>
                <dependency>
                    <groupId>com.vaadin</groupId>
                    <artifactId>flow-server-production-mode</artifactId>
                </dependency>
            </dependencies>

            <build>
                <plugins>
                    <plugin>
                        <groupId>com.vaadin</groupId>
                        <artifactId>vaadin-maven-plugin</artifactId>
                        <version>${vaadin.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <!-- v14.0.0 -->
                                    <goal>build-frontend</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <configuration>
                            <jvmArguments>-Dvaadin.productionMode</jvmArguments>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <filters>
            <filter>src/main/resources/env/application.${env}.properties</filter>
        </filters>

        <!-- Map ${} into resources -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>env/**</exclude>
                </excludes>
                <includes>
                    <include>**</include> <!-- Everything including subdirs to include META-INF, which contains Vaadin frontend style files.  -->
                </includes>
            </resource>
        </resources>

        <defaultGoal>spring-boot:run</defaultGoal>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- Show active profile during compile phase -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-help-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>show-profiles</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>active-profiles</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.vaadin</groupId>
                <artifactId>vaadin-maven-plugin</artifactId>
                <version>${vaadin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <!-- v14.0.0 -->
                            <goal>prepare-frontend</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- The Jetty plugin allows us to easily test the development build by running jetty:run on the command line. -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>${jetty.plugin.version}</version>
                <configuration>
                    <scanIntervalSeconds>2</scanIntervalSeconds>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
